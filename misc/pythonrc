#!/usr/bin/python3
#        _                        _            ___  _  _   
#   __ _| | _____  _____ ___   __| | ___ _ __ / _ \| || |  
#  / _` | |/ _ \ \/ / __/ _ \ / _` |/ _ \ '__| | | | || |_ 
# | (_| | |  __/>  < (_| (_) | (_| |  __/ |  | |_| |__   _|
#  \__,_|_|\___/_/\_\___\___/ \__,_|\___|_|   \___/   |_|  
# 
# Copyright (c) 2022-2023 alexcoder04 <alexcoder04@protonmail.com>
# 
# python config for interactive shell
# the location of this file is defined in $PYTHONSTARTUP

import atexit
import math
import os
import random
import readline
import sys


# history file handling {{{
history = os.path.join(os.path.expanduser("~"), ".cache/python_history")
try:
    readline.read_history_file(history)
except OSError:
    pass

def write_history():
    try:
        readline.write_history_file(history)
    except OSError:
        pass

atexit.register(write_history)
# }}}

# shell-like functions {{{
def cls(*args):
    os.system("clear")

def ls(*args):
    if len(args) == 0:
        args = (".")
    for a in args:
        if a == "":
            a = "."
        print(os.listdir(a))

def pwd(*args):
    print(os.getcwd())

def cd(*args):
    if len(args) == 0:
        args = ("~")
    dest = os.path.abspath(os.path.expanduser(args[0]))
    if not os.path.isdir(dest):
        print(f"'{dest}' doesn't exist or isn't a folder")
        return
    os.chdir(dest)
    print(f"Changed directory to \"{dest}\"")
# }}}

# short functions {{{
def q(*args):
    sys.exit()

def c(*args):
    os.system(*args)
# }}}

# prompt {{{
class _PS1:
    def __init__(self):
        self._line_number = 0

    def _path(self):
        p = os.getcwd()
        h = os.path.expanduser("~")
        if p.startswith(h):
            p = "ÔÄï " + p[len(h):]
        return p

    def _prompt(self):
        return f"[ \033[36m{self._line_number}\033[0m ] [ \033[33m{self._path()}\033[0m ] \033[1;32müêç \033[0m"

    def __str__(self):
        self._line_number += 1
        return self._prompt()

    def get_line_number(self):
        return self._line_number

    def path_part_len(self):
        return len(f"[ {self._path()} ]")

class _PS2:
    def __str__(self):
        return f"[[{sys.ps1.get_line_number()}]] {' ' * (sys.ps1.path_part_len())}  | "

sys.ps1 = _PS1()
sys.ps2 = _PS2()
# }}}

print("\033[36mWelcome to the Python Shell!\033[0m")
print("Available libraries: math, random, os, sys")

